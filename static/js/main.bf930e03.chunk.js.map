{"version":3,"sources":["components/Statistics/Statistics.module.scss","components/Section/Sectiom.module.scss","components/FeedbackOptions/FeedbackOptions.module.scss","components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","titleName","children","useState","title","className","s","section","protoTypes","PropTypes","sting","Statistics","good","neutral","bad","total","element","Math","floor","FeedbackOptions","options","onLeaveFeedback","optionNames","Object","keys","list","map","option","type","onClick","string","toUpperCase","substring","Notification","message","func","App","setGood","setNeutral","setBad","value","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,QAAU,8B,kBCA5BD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,gBCA7DD,EAAOC,QAAU,CAAC,KAAO,8BAA8B,QAAU,mC,iKCG1D,SAASC,EAAT,GAA2C,IAAxBC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,SACnC,EAAgBC,mBAASF,GAAlBG,EAAP,oBAEA,OACE,0BAASC,UAAWC,IAAEC,QAAtB,UACE,oBAAIF,UAAWC,IAAEF,MAAjB,SAAyBA,IACxBF,KAKPF,EAAQQ,WAAa,CACnBJ,MAAOK,YAAUC,O,oBCbZ,SAASC,EAAT,GAAoD,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,IAAKC,EAAS,EAATA,MAK/C,OACE,+BACE,qBAAIV,UAAWC,IAAEU,QAAjB,kBAAgCJ,KAChC,qBAAIP,UAAWC,IAAEU,QAAjB,qBAAmCH,KACnC,qBAAIR,UAAWC,IAAEU,QAAjB,iBAA+BF,KAC/B,qBAAIT,UAAWC,IAAEU,QAAjB,mBAAiCD,KACjC,qBAAIV,UAAWC,IAAEU,QAAjB,+BATKC,KAAKC,MAAON,GAAQA,EAAOC,EAAUC,GAAQ,KASlD,U,oBCXC,SAASK,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAKnCC,EAAcC,OAAOC,KAAKJ,GAEhC,OACE,oBAAIf,UAAWC,IAAEmB,KAAjB,SACGH,EAAYI,KAAI,SAAAC,GACf,OACE,oBAAiBtB,UAAWC,IAAEU,QAA9B,SACE,wBAAQY,KAAK,SAASC,QAAS,kBAAMR,EAAgBM,IAArD,UAXSG,EAYKH,EAXfG,EAAO,GAAGC,cAAgBD,EAAOE,UAAU,OASnCL,GAVE,IAAAG,OCFd,SAASG,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QAC7B,OAAO,4BAAIA,IDsBbf,EAAgBX,WAAa,CAC3BY,QAASX,YAAUC,MACnBW,gBAAiBZ,YAAU0B,M,ME6BdC,MAjDf,WACE,MAAwBjC,mBAAS,GAAjC,mBAAOS,EAAP,KAAayB,EAAb,KACA,EAA8BlC,mBAAS,GAAvC,mBAAOU,EAAP,KAAgByB,EAAhB,KACA,EAAsBnC,mBAAS,GAA/B,mBAAOW,EAAP,KAAYyB,EAAZ,KAyBMxB,EAHGH,EAAOC,EAAUC,EAK1B,OACE,qCACE,cAACd,EAAD,CAASC,UAAU,wBAAnB,SACE,cAACkB,EAAD,CACEC,QAAS,CAAER,OAAMC,UAASC,OAC1BO,gBA9Bc,SAAAmB,GACpB,OAAQA,GACN,IAAK,OACHH,GAAQ,SAAAI,GAAS,OAAIA,EAAY,KACjC,MAEF,IAAK,UACHH,GAAW,SAAAG,GAAS,OAAIA,EAAY,KACpC,MAEF,IAAK,MACHF,GAAO,SAAAE,GAAS,OAAIA,EAAY,KAChC,MAEF,QACE,aAkBF,cAACzC,EAAD,CAASC,UAAU,aAAnB,SACa,IAAVc,EACC,cAACkB,EAAD,CAAcC,QAAQ,yBAEtB,cAACvB,EAAD,CAAYC,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOA,UCrCtD2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bf930e03.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"element\":\"Statistics_element__1u2Me\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Sectiom_section__6ydeE\",\"title\":\"Sectiom_title__1_Jfq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FeedbackOptions_list__1LPeT\",\"element\":\"FeedbackOptions_element__3QjRg\"};","import { PropTypes } from 'prop-types';\nimport { useState } from 'react';\nimport s from './Sectiom.module.scss';\n\nexport function Section({ titleName, children }) {\n  const [title] = useState(titleName);\n\n  return (\n    <section className={s.section}>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.protoTypes = {\n  title: PropTypes.sting,\n};\n","import { PropTypes } from 'prop-types';\nimport s from './Statistics.module.scss';\n\nexport function Statistics({ good, neutral, bad, total }) {\n  const countPositiveFeedbackPercentage = () => {\n    return Math.floor((good / (good + neutral + bad)) * 100);\n  };\n\n  return (\n    <ul>\n      <li className={s.element}>Good:{good}</li>\n      <li className={s.element}>Neutral:{neutral}</li>\n      <li className={s.element}>Bad:{bad}</li>\n      <li className={s.element}>Total:{total}</li>\n      <li className={s.element}>\n        Positive feedback:{countPositiveFeedbackPercentage()}%\n      </li>\n    </ul>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n};\n","import { PropTypes } from 'prop-types';\nimport s from './FeedbackOptions.module.scss';\n\nexport function FeedbackOptions({ options, onLeaveFeedback }) {\n  const capitalize = string => {\n    return string[0].toUpperCase() + string.substring(1);\n  };\n\n  const optionNames = Object.keys(options);\n\n  return (\n    <ul className={s.list}>\n      {optionNames.map(option => {\n        return (\n          <li key={option} className={s.element}>\n            <button type=\"button\" onClick={() => onLeaveFeedback(option)}>\n              {capitalize(option)}\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nFeedbackOptions.protoTypes = {\n  options: PropTypes.sting,\n  onLeaveFeedback: PropTypes.func,\n};\n","import { PropTypes } from 'prop-types';\n\nexport function Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import { Section } from './components/Section';\nimport { Statistics } from './components/Statistics';\nimport { FeedbackOptions } from './components/FeedbackOptions';\nimport { Notification } from './components/Notification';\nimport { useState } from 'react';\nimport './App.scss';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const buttonHandler = value => {\n    switch (value) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const total = countTotalFeedback();\n\n  return (\n    <>\n      <Section titleName=\"Please leave feedback\">\n        <FeedbackOptions\n          options={{ good, neutral, bad }}\n          onLeaveFeedback={buttonHandler}\n        />\n      </Section>\n      <Section titleName=\"Statistics\">\n        {total === 0 ? (\n          <Notification message=\"There is no feedback\" />\n        ) : (\n          <Statistics good={good} neutral={neutral} bad={bad} total={total} />\n        )}\n      </Section>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}